---
title: "Getting started with Shiny - basics!"
author: "Casey O'Hara"
format: 
  html:
    toc: true
editor: visual
---

# Setup

## Required packages:

* `shiny`
* `shinydashboard`
* `tidyverse`
* `palmerpenguins`

## Some resources:

* This is a great introduction to making a Shiny app:[ https://deanattali.com/blog/building-shiny-apps-tutorial/](https://deanattali.com/blog/building-shiny-apps-tutorial/)

* And here are a bunch of tutorials and examples:[ https://shiny.rstudio.com/tutorial/](https://shiny.rstudio.com/tutorial/)

* Here are some cool examples of what you can do with Shiny:[ https://shiny.rstudio.com/gallery/](https://shiny.rstudio.com/gallery/)


# Intro to Shiny (`ui`/`server()`, meet reactivity!)**

## Get started:

(@) Create a new project in R
(@) Open a new R script (not Quarto, just script)
(@) Add the following at the top of the script:

```r
### Attach necessary packages
library(shiny)
library(tidyverse)
library(palmerpenguins)

### Create the user interface:
ui <- fluidPage()

### Create the server function:
server <- function(input, output) {}

### Combine them into an app:
shinyApp(ui = ui, server = server)
```

(@) Save the script as `app.R`
(@) Notice that a 'Run app' option shows up - press it, and see that blank page shows up in the server. Whomp.


## Start building the UI

The *UI** is where the **U**ser **I**nterface is assembled.  User inputs here get passed to the **server**, where the user's selections are translated into code.  **Reactive** elements (dataframes, plots, tables, etc) change when a user input changes!

(@) Here, we'll add a title panel, and a sidebar/main panel layout in our UI.

```r
<other code above>

### Create the user interface:
ui <- fluidPage(
  titlePanel("I am adding a title!"),       # <1>
  sidebarLayout(                            # <2>
    sidebarPanel("put my widgets here"),    # <3>
    mainPanel("put my graph here")          # <4>
  ) ### end sidebarLayout#
) ### end fluidPage

<other code below>
```
1. Inside `fluidPage()` create a `titlePanel` (top of the app)
2. `sidebarLayout` creates a layout that includes a narrow side panel and large main panel
3. Placeholder for the `sidebarPanel`
4. Placeholder for the `mainPanel`

(@) Save, run app again (you may need to stop "listening" - press stop in Console)


## Add your first widget in the side panel!

See the Shiny widget gallery:[ https://shiny.rstudio.com/gallery/widget-gallery.html](https://shiny.rstudio.com/gallery/widget-gallery.html)

(@) Within the sidebar panel, add a radioButtons() widget. You need to tell it: 
    * the ID of the widget (how will you refer to these widget selections later on in the server?)
    * a label to place at the top of the widget (like a widget title)
    * the choices of the check boxes. These should **match the inputs of the variable you're going to use it to explore/update based on.**
    * (see help page for more options)
    
For example, we are going to use the "species" widget to decide which penguin species to show in a graph, and in the 'species' column those are stored as "Adelie", "Gentoo" and "Chinstrap". Those choices should match exactly. \*Note: if you want the choice to look different in the widget, but point to entries in a column, you can set `"visible_text" = "column_entry"` within the `choices =` argument, as in the `"Cool Chinstrap Penguins!" = "Chinstrap"` example below. In this case, `"Cool Chinstrap Penguins!"` will show up as a choice in the widget, but it will functionally point to the string `"Chinstrap"`...which will become relevant later on.

```r
<other code above>

  sidebarLayout(
    sidebarPanel("put my widgets here",
    
      radioButtons( # <1>
        inputId = "penguin_species", # <2>
        label = "Choose penguin species", 
        choices = c("Adelie","Gentoo","Cool Chinstrap Penguins!" = "Chinstrap")
      )
      
    ), ### end sidebarLayout
    
    mainPanel("put my graph here")
    
  ) ### end sidebarLayout

<other code below>
```
1. Many other input widget options!
2. EVERY INPUT MUST HAVE A UNIQUE `inputId`!


## Build a reactive graph in the server...

**... based on selections made in the 'species' widget!**

The widget selection is going to become an **input** that is used to specify what shows up in our graph **output**. Since we gave that widget the `inputId` of `'species'` then we're going to use `input$species` when we want to refer to the widget selection. We will also give our OUTPUTS (created in the server) an ID "name" so that we can call them back to the UI.

(@) In the `server()`, create a reactive subset of the `penguins` df that only includes the species selected by the widget `species`. Then, create a reactive graph of the flipper length (`flipper_length_mm`) vs. body mass (`body_mass_g`) variables in ggplot, and have it show up in our UI (main panel)

```r
<other code above>

server <- function(input, output) {
  penguin_select <- reactive({
    penguins_df <- penguins %>%
      filter(species == input$penguin_species)
      
    return(penguins_df)
  }) ### end penguin_select

  output$penguin_plot <- renderPlot({               # <1>
    ggplot(data = penguin_select()) +               # <2>
      geom_point(aes(x = flipper_length_mm, y = body_mass_g))
  }) ### end penguin_plot
  
} ### end server

<other code below>
```
1. Note `here, we are`output$penguin_plot` sets the ID of this output as `penguin_plot`! 
2. Note `penguin_select()` is followed by parentheses, indicating it is a _reactive_ function, not just a regular dataframe!


(@) Try running the app again... notice that nothing shows up! That's because we haven't added our plot output to our UI yet! We need to call our graph (`output$penguin_plot`) back in the UI main panel:

```r
<other code above>

  sidebarLayout(
    <sidebarPanel up here>,
    
    mainPanel("put my graph here",
    
      plotOutput(outputId = "penguin_plot") # <1>
    
    ) ### end mainPanel
    
  ) ### end sidebarLayout

<other code below>
```
1. Note the `outputId` here MUST match the name given in the server (`output$<outputId>`).  Other output types, like text, tables, etc have their own `xxxOutput` functions.

And now run it! Cool!

## Let's add another widget...

**... to select the color we want to use in our graph!**

(@) In the sidebar, create a new widget that is a dropdown selection (`selectInput`) for different colors that a user can choose from for the graph points:

```r
<other code above>

    sidebarPanel("put my widgets here",
      <radioButtons in here>, # <1>
      
      selectInput(inputId = "pt_color", 
        label = "Select point color", 
        choices = c("Roses are red!"     = "red", 
                    "Violets are purple" = "purple", 
                    "Oranges are..."     = "orange")
      ) ### end of selectInput

    ), ### end sidebarLayout
    
<other code below>
```
1. Note the comma added after the existing `radioButtons` code.  Each additional item (text, widgets, images, etc) must be separated by a comma here in the `ui()`.  This is NOT the same as in the `server()`!
2. Note the names on the left show up as the choice options the user sees; the values on the right are the values stored in the input `input$pt_color`.


(@) Run the app - and notice that a second widget shows up, but the graph doesn't change. Why not? Have we changed anything in the server that would let it know the color should be reactive to the widget input? Not yet! Let's do that next... back into the `server()`!


## Make the graph point color reactive...

**... so it knows what to do with the widget selection!**


```r
<other code above>

server <- function(input, output) {

  <penguin_select reactive up here>

  output$penguin_plot <- renderPlot({               
    ggplot(data = penguin_select()) +               
      geom_point(aes(x = flipper_length_mm, y = body_mass_g),
        color = input$pt_color) # <1> 
  }) ### end penguin_plot
  
} ### end server

<other code below>
```
1. Here we can make the output plot *react* to the choice of `input$pt_color`.



## Let's add a reactive summary table...

**... for male and female penguins of the species selected, which shows up below the graph for that species.**

(@) First, create a reactive subset of the data (in the server) that you'll use to produce the table, and render the table in the server.  The order of these in the server() isn't important, but keeping things organized in a logical manner IS VERY HELPFUL!

```r
<other code above>

server <- function(input, output) {

  <penguin_select reactive up here>

  <output$penguin_plot up here too!>
  
  penguin_sum_table <- reactive({
    penguin_summary_df <- penguins %>%
      filter(species == input$penguin_species) %>%
      group_by(sex) %>%
      summarize(mean_flip = mean(flipper_length_mm),
                mean_mass = mean(body_mass_g))
    
    return(penguin_summary_df)
  }) ### end penguin_sum_table reactive
  
  output$penguin_table <- renderTable({
    penguin_sum_table()
  })
  
  
} ### end server

<other code below>
```

(@) Then call that `penguin_table` output so it shows up in the UI:

```r
<other code above>

  sidebarLayout(
    <sidebarPanel up here>,
    
    mainPanel("put my graph here",
    
      plotOutput(outputId = "penguin_plot"), # <1>
    
      h3('Summary table'),

      tableOutput(outputId = "penguin_table")
      
    ) ### end mainPanel
    
  ) ### end sidebarLayout

<other code below>
```
1. Note again the new comma, separating the `plotOutput` and the `tableOutput` elements in the `ui()`.



(@) Run the app, and see that an (unfinished) table shows up! For nicer tables, consider other packages: `DT`, `gt`, `renderDataTable`, `reactable`
